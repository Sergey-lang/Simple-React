{"version":3,"sources":["p2-homeworks/h10/bll/loadingReducer.ts","p2-homeworks/h12/bll/themeReducer.ts","p2-homeworks/h10/bll/store.ts","index.tsx"],"names":["Actions_Type","initState","loading","ActionsType","themes","currentTheme","rootReducers","combineReducers","state","action","type","LOADING","theme","CHANGE_THEME_COLOR","payload","color","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uLAmBKA,E,sDAfCC,EAA2B,CAC7BC,SAAS,I,SAcRF,K,2BAAAA,M,KASE,IC5BFG,E,iBAAAA,K,+CAAAA,M,KAWL,IAAMF,EAAgC,CAClCG,OAAQ,CAAC,OAAQ,MAAO,OAAQ,UAChCC,aAAc,QCTZC,EAAeC,YAAgB,CACjCL,QFG0B,WAAiF,IAAhFM,EAA+E,uDAAxDP,EAAWQ,EAA6C,uCAC1G,OAAQA,EAAOC,MACX,KAAKV,EAAaW,QACd,OAAO,2BAAIH,GAAX,IAAkBN,QAASO,EAAOP,UAEtC,QACI,OAAOM,IERfI,MDUwB,WAAiF,IAAhFJ,EAA+E,uDAAnDP,EAAWQ,EAAwC,uCACxG,OAAQA,EAAOC,MACX,KAAKP,EAAYU,mBACb,OAAO,2BACAL,GADP,IAEIH,aAAcI,EAAOK,QAAQC,QAGrC,QACI,OAAOP,MCbbQ,EAAmBC,OAAOC,sCAAwCC,QAC3DC,EAAQC,YAAYf,EAAaU,KAG9CC,OAAOG,MAAQA,ECTfE,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUJ,MAAOA,GAEb,qDAGRK,SAASC,eAAe,W","file":"static/js/main.370c73d2.chunk.js","sourcesContent":["export type InitStateType = {\n    loading: boolean\n}\n\nconst initState: InitStateType = {\n    loading: false\n};\n\nexport const loadingReducer = (state: InitStateType = initState, action: HW10ReducersTypes): InitStateType => {\n    switch (action.type) {\n        case Actions_Type.LOADING: {\n            return {...state, loading: action.loading};\n        }\n        default:\n            return state;\n    }\n};\n\n\nenum Actions_Type {\n    LOADING = 'LOADING/LOADING'\n}\n\nexport type Loading = {\n    type: Actions_Type.LOADING\n    loading: boolean\n}\n\nexport const loadingAC = (loading:boolean): Loading => ({type: Actions_Type.LOADING, loading});\n\ntype HW10ReducersTypes = Loading","enum ActionsType {\n    CHANGE_THEME_COLOR = 'THEME/CHANGE-THEME-COLOR'\n}\n\ntype Actions = ReturnType<typeof changeThemeColor>\n\nexport type themeInitStateType = {\n    themes: string[]\n    currentTheme: string\n}\n\nconst initState: themeInitStateType = {\n    themes: ['dark', 'red', 'some', 'purple'],\n    currentTheme: 'some',\n};\n\nexport const themeReducer = (state: themeInitStateType = initState, action: Actions): themeInitStateType => {\n    switch (action.type) {\n        case ActionsType.CHANGE_THEME_COLOR: {\n            return {\n                ...state,\n                currentTheme: action.payload.color\n            };\n        }\n        default:\n            return state;\n    }\n};\n\n\n//Action\ntype ChangeThemeColorType = {\n    type: ActionsType.CHANGE_THEME_COLOR,\n    payload: {\n        color: string\n    }\n}\nexport const changeThemeColor = (color: string): ChangeThemeColorType => ({\n    type: ActionsType.CHANGE_THEME_COLOR,\n    payload: {\n        color\n    }\n})","import {loadingReducer} from \"./loadingReducer\";\nimport {combineReducers, createStore} from 'redux';\nimport {themeReducer} from '../../h12/bll/themeReducer';\n\nconst rootReducers = combineReducers({\n    loading: loadingReducer,\n    theme: themeReducer,\n});\n\nexport type AppStoreType = ReturnType<typeof rootReducers>\n\n//@ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nexport const store = createStore(rootReducers,composeEnhancers());\n\n// @ts-ignore\nwindow.store = store; // for dev\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './p1-main/m1-ui/u1-app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './p2-homeworks/h10/bll/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            {/*<App/>*/}\r\n            <div>dwelmf;welmf;mlere</div>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}