{"version":3,"sources":["p2-homeworks/h3/Greeting.module.css","p1-main/m1-ui/u1-app/App.module.css","p2-homeworks/h3/HW3.module.css","p2-homeworks/h3/Greeting.tsx","p2-homeworks/h3/GreetingContainer.tsx","p2-homeworks/h3/HW3.tsx","p1-main/m1-ui/u1-app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Greeting","name","setNameCallback","addUser","error","totalUsers","users","inputClass","s","correctInput","className","wrapper","input_wrapper","value","onChange","placeholder","error_1","onClick","add_user_btn","userCount","users_block","map","u","key","id","GreetingContainer","addUserCallback","useState","setName","setError","length","e","currentTarget","trim","alert","HW3","setUsers","home_3","newUsers","v1","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,QAAU,0BAA0B,YAAc,8BAA8B,cAAgB,gCAAgC,aAAe,+BAA+B,MAAQ,wBAAwB,QAAU,0BAA0B,aAAe,+BAA+B,UAAY,8B,qBCA9TD,EAAOC,QAAU,CAAC,IAAM,mB,gBCAxBD,EAAOC,QAAU,CAAC,OAAS,sB,sLCkCZC,EArB+B,SAAC,GACoB,IAA9DC,EAA6D,EAA7DA,KAAMC,EAAuD,EAAvDA,gBAAiBC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,WAAWC,EAAW,EAAXA,MAE7CC,EAAaH,EAAOI,IAAEC,aAAe,IAAOD,IAAEJ,MAAOI,IAAEC,aAE7D,OACI,yBAAKC,UAAWF,IAAEG,SACd,yBAAKD,UAAWF,IAAEI,eACd,0CACA,2BAAOC,MAAOZ,EAAMa,SAAUZ,EAAiBQ,UAAWH,EAAYQ,YAAY,eAClF,0BAAML,UAAWF,IAAEQ,SAAUZ,GAC7B,4BAAQa,QAASd,EAASO,UAAWF,IAAEU,cAAvC,YACA,0BAAMR,UAAWF,IAAEW,WAAnB,gBAA4Cd,IAEhD,yBAAKK,UAAWF,IAAEY,aACbd,EAAMe,KAAI,SAAAC,GAAC,OAAE,uBAAGC,IAAKD,EAAEE,IAAV,SAAqBF,EAAErB,KAAvB,SAAmCqB,EAAEE,UCmBpDC,EAtCX,SAAC,GAA8B,IAA7BnB,EAA4B,EAA5BA,MAAOoB,EAAqB,EAArBA,gBAAqB,EAEFC,mBAAS,IAFP,mBAEnB1B,EAFmB,KAEb2B,EAFa,OAGAD,mBAAS,IAHT,mBAGnBvB,EAHmB,KAGZyB,EAHY,KAwBpBxB,EAAaC,EAAMwB,OAEzB,OACI,kBAAC,EAAD,CACIxB,MAAOA,EACPL,KAAMA,EACNC,gBAzBgB,SAAC6B,GACrBF,EAAS,IACTD,EAAQG,EAAEC,cAAcnB,QAwBpBV,QApBQ,WAEZ,GADiBF,EAAKgC,OAElBP,EAAgBzB,GAChBiC,MAAM,SAAWjC,GACjB2B,EAAQ,QACL,CAEHC,EADU,yBAcVzB,MAAOA,EACPC,WAAYA,K,wBCVb8B,MApBf,WAAgB,IAAD,EACeR,mBAA0B,IADzC,mBACJrB,EADI,KACG8B,EADH,KASX,OACI,yBAAK1B,UAAWF,IAAE6B,QACd,6BAEA,kBAAC,EAAD,CAAmB/B,MAAOA,EACPoB,gBAXH,SAACzB,GACrB,IACIqC,EAAQ,CADD,CAACd,GAAIe,cAAMtC,KAAMA,IAChB,mBAAaK,IACzB8B,EAASE,QCFFE,MAbf,WACI,OACI,yBAAK9B,UAAWF,IAAEgC,KACd,iDAGA,kBAAC,EAAD,QCEQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDiItB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArD,GACLsD,QAAQtD,MAAMA,EAAMuD,c","file":"static/js/main.dacfb09d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Greeting_wrapper__3QZ00\",\"users_block\":\"Greeting_users_block__2rZB4\",\"input_wrapper\":\"Greeting_input_wrapper__24SM0\",\"correctInput\":\"Greeting_correctInput__1BXfm\",\"error\":\"Greeting_error__2bc1w\",\"error_1\":\"Greeting_error_1__3QEyh\",\"add_user_btn\":\"Greeting_add_user_btn__3egH4\",\"userCount\":\"Greeting_userCount__3SfGD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1cTVw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home_3\":\"HW3_home_3__1ItJN\"};","import React from 'react';\r\nimport s from './Greeting.module.css';\r\nimport {UserType} from './HW3';\r\n\r\ntype GreetingPropsType = {\r\n    users:Array<UserType>\r\n    name: string // need to fix any\r\n    setNameCallback: any// need to fix any\r\n    addUser: () => void// need to fix any\r\n    error: string // need to fix any\r\n    totalUsers: number // need to fix any\r\n}\r\n\r\n// презентационная компонента (для верстальщика)\r\nconst Greeting: React.FC<GreetingPropsType> = (\r\n    {name, setNameCallback, addUser, error, totalUsers,users}) => {\r\n\r\n    const inputClass = error? s.correctInput + ' ' +  s.error: s.correctInput // need to fix with (?:)\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.input_wrapper}>\r\n                <h3>USERS FORM</h3>\r\n                <input value={name} onChange={setNameCallback} className={inputClass} placeholder='Enter name'/>\r\n                <span className={s.error_1}>{error}</span>\r\n                <button onClick={addUser} className={s.add_user_btn}>Add user</button>\r\n                <span className={s.userCount}>Users count: {totalUsers}</span>\r\n            </div>\r\n            <div className={s.users_block}>\r\n                {users.map(u=><p key={u.id}>Name: {u.name}, ID: {u.id}</p>)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Greeting;\r\n","import React, {useState, ChangeEvent,} from 'react';\r\nimport Greeting from './Greeting';\r\nimport {UserType} from './HW3';\r\n\r\ntype GreetingContainerPropsType = {\r\n    users: Array<UserType>\r\n    addUserCallback: (name: string) => void\r\n}\r\n\r\nconst GreetingContainer: React.FC<GreetingContainerPropsType> =\r\n    ({users, addUserCallback}) => {\r\n\r\n        const [name, setName] = useState('');\r\n        const [error, setError] = useState('');\r\n\r\n        const setNameCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n            setError('')\r\n            setName(e.currentTarget.value);\r\n        };\r\n\r\n\r\n        const addUser = () => {\r\n            const trimName = name.trim()\r\n            if (trimName) {\r\n                addUserCallback(name)\r\n                alert('Hello ' + name)\r\n                setName('')\r\n            } else {\r\n                let err = 'Name is not defined'\r\n                setError(err)\r\n            }\r\n\r\n        };\r\n\r\n        const totalUsers = users.length;\r\n\r\n        return (\r\n            <Greeting\r\n                users={users}\r\n                name={name}\r\n                setNameCallback={setNameCallback}\r\n                addUser={addUser}\r\n                error={error}\r\n                totalUsers={totalUsers}\r\n            />\r\n        );\r\n    }\r\n\r\nexport default GreetingContainer;\r\n","import React, {useState} from 'react';\r\nimport GreetingContainer from './GreetingContainer';\r\nimport s from './HW3.module.css';\r\nimport {v1} from 'uuid';\r\nimport AlternativeGreeting from './AlternativeGreeting';\r\n\r\n// types\r\nexport type UserType = {\r\n    id: string // need to fix any\r\n    name: string // need to fix any\r\n}\r\n\r\n// уровень работы с глобальными данными\r\nfunction HW3() {\r\n    const [users, setUsers] = useState<Array<UserType>>([]) // need to fix any\r\n\r\n    const addUserCallback = (name: string) => { // need to fix any\r\n        let user = {id: v1(), name: name};\r\n        let newUsers = [user, ...users];\r\n        setUsers(newUsers); // need to fix\r\n    }\r\n\r\n    return (\r\n        <div className={s.home_3}>\r\n            <hr/>\r\n            {/*should work (должно работать)*/}\r\n            <GreetingContainer users={users}\r\n                               addUserCallback={addUserCallback}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HW3;\r\n","import React from \"react\";\r\nimport s from \"./App.module.css\";\r\nimport HW3 from \"../../../p2-homeworks/h3/HW3\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className={s.App}>\r\n            <div>react homeworks:</div>\r\n            {/*<HW1/>*/}\r\n            {/*<HW2/>*/}\r\n            <HW3/>\r\n            {/*<HW4/>*/}\r\n            {/*<HW5/>*/}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./p1-main/m1-ui/u1-app/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}